SET(CMAKE_LIBRARY_PATH ${SPINE_DEP_DIR})

#----------------------------------------------------
# Discord
#----------------------------------------------------

IF(WITH_CLIENT)
	IF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/Discord/")
		execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-discord.bat ${VS_TOOLCHAIN} ${VS_ARCH} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
	ENDIF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/Discord/")
	IF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/Discord/")
		execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-discord.sh ${UNIX_COMPILER} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
	ENDIF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/Discord/")
	SET(LIBNAME "DISCORD")
	SET(LIBHEADER "discord.h")
	SET(DISCORD_ROOT ${SPINE_DEP_DIR}/Discord)
	
	IF(WIN32)
		SET(DISCORD_COMPONENT ${DISCORD_COMPONENT} discord_game_sdk.dll)
	ELSE(WIN32)
		SET(DISCORD_COMPONENT ${DISCORD_COMPONENT} discord_game_sdk.so)
	ENDIF(WIN32)

	find_package(EasyFind REQUIRED COMPONENTS ${DISCORD_COMPONENT})
	include_directories(SYSTEM ${DISCORD_INCLUDE_DIR})
ENDIF(WITH_CLIENT)

#----------------------------------------------------
# clockUtils
#----------------------------------------------------

IF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/clockUtils/")
	execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-clockUtils.bat ${VS_TOOLCHAIN} ${VS_ARCH} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
ENDIF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/clockUtils/")
IF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/clockUtils/")
	execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-clockUtils.sh ${UNIX_COMPILER} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
ENDIF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/clockUtils/")
SET(LIBNAME "CLOCKUTILS")
SET(LIBHEADER "clockUtils/errors.h")
SET(CLOCKUTILS_ROOT ${SPINE_DEP_DIR}/clockUtils)
SET(CLOCKUTILS_COMPONENT ${CLOCKUTILS_COMPONENT} clock_compression)
IF(WITH_CLIENT)
	SET(CLOCKUTILS_COMPONENT ${CLOCKUTILS_COMPONENT} clock_log)
ENDIF(WITH_CLIENT)
SET(CLOCKUTILS_COMPONENT ${CLOCKUTILS_COMPONENT} clock_sockets)

find_package(EasyFind REQUIRED COMPONENTS ${CLOCKUTILS_COMPONENT})
include_directories(SYSTEM ${CLOCKUTILS_INCLUDE_DIR})

#----------------------------------------------------
# GMock
#----------------------------------------------------

IF(WITH_CLIENT)
	IF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/gmock/")
		execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-gmock.bat ${VS_TOOLCHAIN} ${VS_ARCH} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
	ENDIF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/gmock/")
	IF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/gmock/")
		execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-gmock.sh ${UNIX_COMPILER} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
	ENDIF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/gmock/")

	SET(LIBNAME "GTEST_DEBUG")
	SET(LIBHEADER "gtest/gtest.h")
	SET(GTEST_DEBUG_ROOT ${SPINE_DEP_DIR}/gmock/Debug)
	SET(GTEST_DEBUG_COMPONENT ${GTEST_DEBUG_COMPONENT} gtestd)

	find_package(EasyFind REQUIRED COMPONENTS ${GTEST_DEBUG_COMPONENT})
	include_directories(SYSTEM ${GTEST_DEBUG_INCLUDE_DIR})

	SET(LIBNAME "GTEST_RELEASE")
	SET(GTEST_RELEASE_ROOT ${SPINE_DEP_DIR}/gmock/Release)
	SET(GTEST_RELEASE_COMPONENT ${GTEST_RELEASE_COMPONENT} gtest)

	find_package(EasyFind REQUIRED COMPONENTS ${GTEST_RELEASE_COMPONENT})
ENDIF(WITH_CLIENT)

#----------------------------------------------------
# MariaDB
#----------------------------------------------------

IF(WITH_SERVER)
	IF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/mariadb/")
		execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-mariadb.bat ${VS_TOOLCHAIN} ${VS_ARCH} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
	ENDIF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/mariadb/")
	IF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/mariadb/")
		execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-mariadb.sh ${UNIX_COMPILER} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
	ENDIF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/mariadb/")
	SET(LIBNAME "MARIADB")
	SET(LIBHEADER "mariadb/m_string.h")
	SET(MARIADB_ROOT ${SPINE_DEP_DIR}/mariadb)
	IF(WIN32)
		SET(MARIADB_COMPONENT ${MARIADB_COMPONENT} libmariadb)
	ELSEIF(UNIX)
		SET(MARIADB_COMPONENT ${MARIADB_COMPONENT} mariadb)
	ENDIF()

	find_package(EasyFind REQUIRED COMPONENTS ${MARIADB_COMPONENT})
	include_directories(SYSTEM ${MARIADB_INCLUDE_DIR})
	include_directories(SYSTEM ${MARIADB_INCLUDE_DIR}/mariadb)
ENDIF(WITH_SERVER)

#----------------------------------------------------
# OpenSSL
#----------------------------------------------------

IF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/openSSL/")
	execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-openSSL.bat ${VS_TOOLCHAIN} ${VS_ARCH} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
ENDIF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/openSSL/")
IF(UNIX AND NOT ANDROID)
	find_package(OpenSSL REQUIRED)
ELSEIF(WIN32)
	SET(LIBNAME "OPENSSL")
	SET(LIBHEADER "openssl/rsa.h")
	SET(OPENSSL_ROOT ${SPINE_DEP_DIR}/openSSL)
	find_package(EasyFind REQUIRED COMPONENTS libcrypto libssl)
ENDIF()
include_directories(SYSTEM ${OPENSSL_INCLUDE_DIR})
#----------------------------------------------------
# Qt
#----------------------------------------------------

IF(WITH_CLIENT)
	IF(UNIX AND NOT ANDROID)
		SET(ENV{Qt5_DIR} "")
	ENDIF()

	# Test for supported Qt version
	find_program(QMAKE_EXECUTABLE NAMES qmake HINTS $ENV{Qt5_DIR} ENV QTDIR PATH_SUFFIXES bin)

	SET(QT_SEARCH_MODULES "")

	SET(QT_SEARCH_MODULES ${QT_SEARCH_MODULES} Concurrent)
	SET(QT_SEARCH_MODULES ${QT_SEARCH_MODULES} Core)
	SET(QT_SEARCH_MODULES ${QT_SEARCH_MODULES} Gui)
	SET(QT_SEARCH_MODULES ${QT_SEARCH_MODULES} LinguistTools)
	SET(QT_SEARCH_MODULES ${QT_SEARCH_MODULES} Network)
	SET(QT_SEARCH_MODULES ${QT_SEARCH_MODULES} Svg)
	SET(QT_SEARCH_MODULES ${QT_SEARCH_MODULES} Widgets)
	IF(WIN32)
		SET(QT_SEARCH_MODULES ${QT_SEARCH_MODULES} WinExtras)
	ENDIF(WIN32)

	FIND_PACKAGE(Qt5 REQUIRED ${QT_SEARCH_MODULES} HINTS $ENV{Qt5_DIR})
	
	IF(UNIX AND NOT ANDROID)
		SET(Qt5_DIR_Backup ${Qt5_DIR})
	ENDIF()

	INCLUDE_DIRECTORIES(${Qt5Concurrent_INCLUDE_DIRS})
	SET(QT_LIBRARIES ${QT_LIBRARIES} ${Qt5Concurrent_LIBRARIES})
	INCLUDE_DIRECTORIES(SYSTEM ${Qt5Core_INCLUDE_DIRS})
	SET(QT_LIBRARIES ${QT_LIBRARIES} ${Qt5Core_LIBRARIES})
	INCLUDE_DIRECTORIES(SYSTEM ${Qt5Gui_INCLUDE_DIRS})
	SET(QT_LIBRARIES ${QT_LIBRARIES} ${Qt5Gui_LIBRARIES})
	INCLUDE_DIRECTORIES(SYSTEM ${Qt5Network_INCLUDE_DIRS})
	SET(QT_LIBRARIES ${QT_LIBRARIES} ${Qt5Network_LIBRARIES})
	INCLUDE_DIRECTORIES(${Qt5Svg_INCLUDE_DIRS})
	SET(QT_LIBRARIES ${QT_LIBRARIES} ${Qt5Svg_LIBRARIES})
	INCLUDE_DIRECTORIES(SYSTEM ${Qt5Widgets_INCLUDE_DIRS})
	SET(QT_LIBRARIES ${QT_LIBRARIES} ${Qt5Widgets_LIBRARIES})
	IF(WIN32)
		INCLUDE_DIRECTORIES(${Qt5WinExtras_INCLUDE_DIRS})
		SET(QT_LIBRARIES ${QT_LIBRARIES} ${Qt5WinExtras_LIBRARIES})
	ENDIF(WIN32)
ENDIF(WITH_CLIENT)


#----------------------------------------------------
# SQLite
#----------------------------------------------------

IF(WITH_CLIENT)
	IF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/sqlite/")
		execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-sqlite.bat ${VS_TOOLCHAIN} ${VS_ARCH} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
	ENDIF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/sqlite/")
	IF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/sqlite/")
		execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-sqlite.sh ${UNIX_COMPILER} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
	ENDIF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/sqlite/")
	SET(LIBNAME "SQLITE3")
	SET(LIBHEADER "sqlite3.h")
	SET(SQLITE3_ROOT ${SPINE_DEP_DIR}/sqlite)
	find_package(EasyFind REQUIRED COMPONENTS sqlite3)
	include_directories(SYSTEM ${SQLITE3_INCLUDE_DIR})
ENDIF(WITH_CLIENT)

#----------------------------------------------------
# tinyxml
#----------------------------------------------------

IF(WITH_SERVER)
	IF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/tinyxml2/")
		execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-tinyxml.bat ${VS_TOOLCHAIN} ${VS_ARCH} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
	ENDIF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/tinyxml2/")
	IF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/tinyxml2/")
		execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-tinyxml.sh ${UNIX_COMPILER} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
	ENDIF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/tinyxml2/")

	IF(UNIX)
		SET(LIBNAME "TINYXML")
		SET(LIBHEADER "tinyxml2.h")
		SET(TINYXML_ROOT ${SPINE_DEP_DIR}/tinyxml2)
		find_package(EasyFind REQUIRED COMPONENTS tinyxml2)
		include_directories(SYSTEM ${TINYXML_INCLUDE_DIR})
		
		SET(TINYXML_DEBUG_LIBRARIES ${TINYXML_LIBRARIES})
		SET(TINYXML_RELEASE_LIBRARIES ${TINYXML_LIBRARIES})
	ELSEIF(WIN32)
		SET(LIBNAME "TINYXML_DEBUG")
		SET(LIBHEADER "tinyxml2.h")
		SET(TINYXML_DEBUG_ROOT ${SPINE_DEP_DIR}/tinyxml2/Debug)
		SET(TINYXML_DEBUG_COMPONENT ${TINYXML_DEBUG_COMPONENT} tinyxml2)

		find_package(EasyFind REQUIRED COMPONENTS ${TINYXML_DEBUG_COMPONENT})
		include_directories(SYSTEM ${TINYXML_DEBUG_INCLUDE_DIR})

		SET(LIBNAME "TINYXML_RELEASE")
		SET(TINYXML_RELEASE_ROOT ${SPINE_DEP_DIR}/tinyxml2/Release)
		SET(TINYXML_RELEASE_COMPONENT ${TINYXML_RELEASE_COMPONENT} tinyxml2)

		find_package(EasyFind REQUIRED COMPONENTS ${TINYXML_RELEASE_COMPONENT})
	ENDIF(UNIX)
ENDIF(WITH_SERVER)

#----------------------------------------------------
# zlib
#----------------------------------------------------

IF(WITH_CLIENT)
	IF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/zlib/")
		execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-zlib.bat ${VS_TOOLCHAIN} ${VS_ARCH} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
	ENDIF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/zlib/")
	IF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/zlib/")
		execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-zlib.sh ${UNIX_COMPILER} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
	ENDIF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/zlib/")

	IF(UNIX)
		SET(LIBNAME "ZLIB")
		SET(LIBHEADER "zlib.h")
		SET(ZLIB_ROOT ${SPINE_DEP_DIR}/zlib)
		find_package(EasyFind REQUIRED COMPONENTS z)
		include_directories(SYSTEM ${ZLIB_INCLUDE_DIR})
		
		SET(ZLIB_DEBUG_LIBRARIES ${ZLIB_LIBRARIES})
		SET(ZLIB_RELEASE_LIBRARIES ${ZLIB_LIBRARIES})
	ELSEIF(WIN32)
		SET(LIBNAME "ZLIB_DEBUG")
		SET(LIBHEADER "zlib.h")
		SET(ZLIB_DEBUG_ROOT ${SPINE_DEP_DIR}/zlib/Debug)
		SET(ZLIB_DEBUG_COMPONENT ${ZLIB_DEBUG_COMPONENT} zlibstaticd)

		find_package(EasyFind REQUIRED COMPONENTS ${ZLIB_DEBUG_COMPONENT})
		include_directories(SYSTEM ${ZLIB_DEBUG_INCLUDE_DIR})

		SET(LIBNAME "ZLIB_RELEASE")
		SET(ZLIB_RELEASE_ROOT ${SPINE_DEP_DIR}/zlib/Release)
		SET(ZLIB_RELEASE_COMPONENT ${ZLIB_RELEASE_COMPONENT} zlibstatic)

		find_package(EasyFind REQUIRED COMPONENTS ${ZLIB_RELEASE_COMPONENT})
	ENDIF(UNIX)
ENDIF(WITH_CLIENT)

#----------------------------------------------------
# Zipper
#----------------------------------------------------

IF(WITH_CLIENT)
	IF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/zipper/")
		execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-zipper.bat ${VS_TOOLCHAIN} ${VS_ARCH} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
	ENDIF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/zipper/")
	IF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/zipper/")
		execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-zipper.sh ${UNIX_COMPILER} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
	ENDIF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/zipper/")

	IF(UNIX)
		SET(LIBNAME "ZIPPER")
		SET(LIBHEADER "zipper/zipper.h")
		SET(ZIPPER_ROOT ${SPINE_DEP_DIR}/zlib)
		find_package(EasyFind REQUIRED COMPONENTS Zipper-static)
		include_directories(SYSTEM ${ZIPPER_INCLUDE_DIR})
		
		SET(ZIPPER_DEBUG_LIBRARIES ${ZIPPER_LIBRARIES})
		SET(ZIPPER_RELEASE_LIBRARIES ${ZIPPER_LIBRARIES})
	ELSEIF(WIN32)
		SET(LIBNAME "ZIPPER_DEBUG")
		SET(LIBHEADER "zipper/zipper.h")
		SET(ZIPPER_DEBUG_ROOT ${SPINE_DEP_DIR}/zipper/Debug)
		SET(ZIPPER_DEBUG_COMPONENT ${ZIPPER_DEBUG_COMPONENT} libZipper-static)

		find_package(EasyFind REQUIRED COMPONENTS ${ZIPPER_DEBUG_COMPONENT})
		include_directories(SYSTEM ${ZIPPER_DEBUG_INCLUDE_DIR})

		SET(LIBNAME "ZIPPER_RELEASE")
		SET(ZIPPER_RELEASE_ROOT ${SPINE_DEP_DIR}/zipper/Release)
		SET(ZIPPER_RELEASE_COMPONENT ${ZIPPER_RELEASE_COMPONENT} libZipper-static)

		find_package(EasyFind REQUIRED COMPONENTS ${ZIPPER_RELEASE_COMPONENT})
	ENDIF(UNIX)
ENDIF(WITH_CLIENT)

#----------------------------------------------------
# Boost
#----------------------------------------------------

IF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/boost/")
	execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-boost.bat ${VS_TOOLCHAIN} ${VS_ARCH} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
ENDIF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/boost/")
IF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/boost/")
	execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-boost.sh ${UNIX_COMPILER} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
ENDIF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/boost/")
SET(LIBNAME "BOOST")
SET(LIBHEADER "boost/thread.hpp")
SET(BOOST_ROOT ${SPINE_DEP_DIR}/boost)
SET(BOOST_COMPONENT ${BOOST_COMPONENT} boost_date_time)
IF(WITH_SERVER)
	SET(BOOST_COMPONENT ${BOOST_COMPONENT} boost_filesystem)
ENDIF(WITH_SERVER)
IF(WITH_CLIENT)
	SET(BOOST_COMPONENT ${BOOST_COMPONENT} boost_iostreams)
ENDIF(WITH_CLIENT)
SET(BOOST_COMPONENT ${BOOST_COMPONENT} boost_regex)
SET(BOOST_COMPONENT ${BOOST_COMPONENT} boost_serialization)
SET(BOOST_COMPONENT ${BOOST_COMPONENT} boost_system)
SET(BOOST_COMPONENT ${BOOST_COMPONENT} boost_thread)
find_package(EasyFind REQUIRED COMPONENTS ${BOOST_COMPONENT})
include_directories(SYSTEM ${BOOST_INCLUDE_DIR})

#----------------------------------------------------
# Translator
#----------------------------------------------------

IF(WITH_CLIENT AND WITH_TRANSLATOR)
       IF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/translator/")
               execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-translator.bat ${VS_TOOLCHAIN} ${VS_ARCH} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
       ENDIF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/translator/")
       IF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/translator/")
               execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-translator.sh ${UNIX_COMPILER} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
       ENDIF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/translator/")
       SET(LIBNAME "TRANSLATOR")
       SET(LIBHEADER "translator/api/TranslatorAPI.h")
       SET(TRANSLATOR_ROOT ${SPINE_DEP_DIR}/translator)
       SET(TRANSLATOR_COMPONENT ${TRANSLATOR_COMPONENT} TranslatorAPI TranslatorCommon)

       find_package(EasyFind REQUIRED COMPONENTS ${TRANSLATOR_COMPONENT})
       include_directories(SYSTEM ${TRANSLATOR_INCLUDE_DIR})
ENDIF(WITH_CLIENT AND WITH_TRANSLATOR)

#----------------------------------------------------
# SimpleWebServer
#----------------------------------------------------

IF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/SimpleWebServer/")
	execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-simplewebserver.bat ${VS_TOOLCHAIN} ${VS_ARCH} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
ENDIF(WIN32 AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/SimpleWebServer/")
IF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/SimpleWebServer/")
	execute_process(COMMAND ${CMAKE_SOURCE_DIR}/dependencies/build-simplewebserver.sh ${UNIX_COMPILER} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/dependencies)
ENDIF(UNIX AND NOT ANDROID AND NOT EXISTS "${SPINE_DEP_DIR}/SimpleWebServer/")
SET(LIBNAME "SIMPLEWEBSERVER")
SET(LIBHEADER "SimpleWebServer/server_https.hpp")
SET(SIMPLEWEBSERVER_ROOT ${SPINE_DEP_DIR}/SimpleWebServer)

include_directories(SYSTEM ${SIMPLEWEBSERVER_ROOT}/include)
